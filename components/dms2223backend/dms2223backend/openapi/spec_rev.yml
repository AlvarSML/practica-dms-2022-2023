openapi: 3.0.0
info:
  title: DMS backend service REST API
  version: '1.0'
  description: |
    API REST para el servicio de backend de un trabajo del grado de Ingenieria Informatica.

    Diseño y Mantenimiento del Software.
    Grado en Ingeniería Informática, Universidad de Burgos, 2022-2023.
  contact:
    name: Universidad de Burgos
tags:
  - name: discussion
    description: Operations regarding the questions and answers.
  - name: moderation
    description: Moderation operations.
  - name: questions
    description: Question-related operations.
  - name: answers
    description: Answer-related operations.
  - name: comments
    description: Comment-related operations.
  - name: votes
    description: Vote-related operations.
  - name: reports
    description: Report-related operations.
  - name: server
    description: |
      Operations about the server itself (e.g., server status querying)
servers:
  - url: /api/v1
paths:
  '/':
    get:
      summary: Entrada de prueba
      operationId: dms2223backend.presentation.rest.inicio.test_inicio
      description: Use this operation to verify the server is running successfully and the API is reachable.
      responses:
        '200':
          description: Mensaje "¡Hola, Mundo!"
          content:
            'text/plain':
              schema:
                type: string
                example: '¡Hola, Mundo!'
  /questions/{idusu}:
    get: 
      summary: Se obtienen las preguntas de un usuario
      description: Se obtienen todos los datos de las preguntas de un usuario
      operationId: dms2223backend.presentation.rest.inicio.preguntas_usuario
      parameters:
        - $ref: '#/components/parameters/IdentificadorPregunta'
      responses:
        '200':
          description: Lista de preguntas
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PreguntaModelo'
              example:
                id_pregunta: 123
                titulo: 'Titulo de la pregunta'
                contenido: 'Texto mas extenso de la pregunta'
                autor: 123
                fecha: 131289798312
                visibilidad: true
      tags:
        - pregunta
      security:
        - user_token: []
          api_key: []
  /questions:
    get:
      summary: Gets the existing questions
      description: |
        Queries the storage to fetch the questions.

        Only question stubs are returned. Full information for each question
        should be fetched separately.
      operationId: dms2223backend.presentation.rest.inicio.list_preguntas
      responses:
        '200':
          description: A list of questions.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionsListModel'
              example:
                - qid: 1
                  title: 'Recommended size for the work groups?'
                  timestamp: 1665574089.0
                - qid: 2
                  title: 'Separate report or READMEs?'
                  timestamp: 1665693009.12
      tags:
        - discussion
        - questions
      security:
        - api_key: []
    post:
      summary: Creates a new question
      description: |
        This operation creates a new question.

        The owner of the question will be automatically retrieved from the
        user token against the authorization server.
      operationId: dms2223backend.presentation.rest.preguntas.create_preg
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/QuestionCreationModel'
            example:
              title: 'Recommended size for the work groups?'
              body: 'Which is the recommended size for the work groups in your opinion?'
      responses:
        '201':
          description: Question created.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionFullModel'
              example:
                qid: 1
                title: 'Recommended size for the work groups?'
                body: 'Which is the recommended size for the work groups in your opinion?'
                owner:
                  username: 'user1'
                timestamp: 1665574089.0
      tags:
        - discussion
        - questions
      security:
        - user_token: []
          api_key: []
  /questions/{qid}:
    get:
      summary: Gets a single question
      operationId: dms2223backend.presentation.rest.preguntas.get_preg_id
      parameters:
        - $ref: '#/components/parameters/QuestionIdPathParam'
      responses:
        '200':
          description: The full data of a question.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionFullModel'
              example:
                qid: 1
                title: 'Recommended size for the work groups?'
                body: 'Which is the recommended size for the work groups in your opinion?'
                owner:
                  username: 'user1'
                timestamp: 1665574089.0
        '404':
          description: The question does not exist.
          content:
            'text/plain':
              schema:
                type: string
              example: 'The question with qid 5 does not exist.'
      tags:
        - discussion
        - questions
      security:
        - user_token: []
          api_key: []
  /questions/{qid}/answers:
    get:
      summary: Gets the answers for a question
      description: |
        Fetches the full answers for a given question.
      operationId: dms2223backend.presentation.rest.preguntas.get_preg_answers
      parameters:
        - $ref: '#/components/parameters/QuestionIdPathParam'
      responses:
        '200':
          description: The answers for a question.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AnswersListModel'
              example:
                - id: 1
                  qid: 1
                  timestamp: 1665575089
                  body: I would suggest four members.
                  owner:
                    username: user3
                  votes: 4
                  user_votes:
                    user3: true
                    user4: true
                    user5: true
                    user6: true
                  comments:
                    - id: 2
                      aid: 1
                      timestamp: 1665575389
                      body: Evaluation criteria may be relaxed due to the tight number of members
                      sentiment: POSITIVE
                      owner:
                        username: user4
                      votes: 2
                      user_votes:
                        user6: true
                        user5: true
                    - id: 1
                      aid: 1
                      timestamp: 1665575289
                      body: Enough to distribute the workload equitatively
                      sentiment: POSITIVE
                      owner:
                        username: user4
                      votes: 1
                      user_votes:
                        user6: true
                    - id: 3
                      aid: 1
                      timestamp: 1665577389
                      body: The deadline may be too close for the workload and a group this "small"
                      sentiment: NEGATIVE
                      owner:
                        username: user4
                      votes: 0
                      user_votes: []
                - id: 2
                  qid: 1
                  timestamp: 1665675089
                  body: Five members.
                  owner:
                    username: user2
                  votes: 2
                  user_votes:
                    user1: true
                    user2: true
                  comments:
                    - id: 4
                      aid: 2
                      timestamp: 1665777389
                      body: The teacher may be stricter if groups are too large
                      sentiment: NEGATIVE
                      owner:
                        username: user4
                      votes: 0
                      user_votes: []
        '404':
          description: The question does not exist.
          content:
            'text/plain':
              schema:
                type: string
              example: 'The question with qid 5 does not exist.'
      tags:
        - discussion
        - questions
        - answers
      security:
        - user_token: []
          api_key: []
    post:
      summary: Answers a question
      description: |
        This operation creates an answer for an existing question.

        The owner of the answer will be automatically retrieved from the
        user token against the authorization server.
      operationId: dms2223backend.presentation.rest.preguntas.set_preg_answers
      parameters:
        - $ref: '#/components/parameters/QuestionIdPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AnswerCreationModel'
            example:
              qid: 1
              body: I would suggest four members.
      responses:
        '201':
          description: The created answer.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AnswerFullModel'
              example:
                id: 1
                qid: 1
                timestamp: 1665575089
                body: I would suggest four members.
                owner:
                  username: user3
                votes: 0
                user_votes: {}
                comments: []
        '404':
          description: The question does not exist.
          content:
            'text/plain':
              schema:
                type: string
              example: 'The question with qid 5 does not exist.'
      tags:
        - discussion
        - questions
        - answers
      security:
        - user_token: []
          api_key: []
  /questions/{qid}/reports:
    post:
      summary: Reports a question
      description: |
        This operation will report a question to be reviewed by a moderator.

        The owner of the report will be automatically retrieved from the
        user token against the authorization server.
      operationId: dms2223backend.presentation.rest.preguntas.set_preg_report
      parameters:
        - $ref: '#/components/parameters/QuestionIdPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/QuestionReportCreationModel'
            example:
              reason: Promotes hate speech
      responses:
        '201':
          description: The created report.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionReportFullModel'
              example:
                id: 1
                qid: 2
                reason: Promotes hate speech
                status: PENDING
                owner:
                  username: user4
                timestamp: 1665922785
        '404':
          description: The question does not exist.
          content:
            'text/plain':
              schema:
                type: string
              example: 'The question with qid 5 does not exist.'
      tags:
        - discussion
        - moderation
        - questions
        - reports
      security:
        - user_token: []
          api_key: []
  /questions/reports:
    get:
      summary: Get a list of question reports.
      description: |
        This operation gets a listing of question reports.

        Several parameters can be used to filter out the reports according to
        their status.
      operationId: dms2223backend.presentation.rest.preguntas.get_all_reports
      parameters:
        - name: pending
          description: |
            Set to `false` to exclude the pending reports from the listing.
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: accepted
          description: |
            Set to `false` to exclude the accepted reports from the listing.
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: rejected
          description: |
            Set to `false` to exclude the rejected reports from the listing.
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Listing of question reports
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/QuestionReportsListModel'
              example:
                - id: 1
                  qid: 2
                  reason: Promotes hate speech
                  status: ACCEPTED
                  owner:
                    username: user4
                  timestamp: 1665922785
                - id: 2
                  qid: 4
                  reason: Not a question
                  status: REJECTED
                  owner:
                    username: user5
                  timestamp: 1665922785
                - id: 3
                  qid: 4
                  reason: Question is too vague
                  status: PENDING
                  owner:
                    username: user5
                  timestamp: 1665922785
      tags:
        - moderation
        - questions
        - reports
      security:
        - user_token: []
          api_key: []
  /questions/reports/{qrid}:
    put:
      summary: Change the status of a question report
      description: |
        Use this operation to change the status of a question report.

        When a report on a question is accepted, the linked question should be
        hidden so neither the question nor its answers and comments are visible.
      operationId: dms2223backend.presentation.rest.preguntas.put_preg_report
      parameters:
        - $ref: '#/components/parameters/QuestionReportIdPathParam'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReportStatusChangeModel'
            example:
              status: ACCEPTED
      responses:
        '204':
          $ref: '#/components/responses/ReportStatusChanged'
        '404':
          description: The question report does not exist.
          content:
            'text/plain':
              schema:
                type: string
              example: 'The question report with qrid 25 does not exist.'
      tags:
        - moderation
        - questions
        - reports
      security:
        - user_token: []
          api_key: []  
  /users:
    get:
      summary: Gets the existing users
      description: |
        Queries the storage to fetch the questions.

        Only question stubs are returned. Full information for each question
        should be fetched separately.
      operationId: dms2223backend.presentation.rest.usuarios.get_allusers
      responses:
        '200':
          description: A list of users.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserFullModel'
              example:
                - uid: 1
                  username: 'User1'
                - uid: 2
                  username: 'User2'
      tags:
        - discussion
        - user
      security:
        - api_key: []

components:
  schemas:
    QuestionCoreModel:
      type: object
      properties:
        qid:
          type: integer
        title:
          type: string
        timestamp:
          type: number
        pos_votes:
          type: integer
        neg_votes:
          type: integer
      required:
        - qid
        - title
        - timestamp
    QuestionStubModel:
      allOf:
        - $ref: '#/components/schemas/QuestionCoreModel'
    QuestionFullModel:
      allOf:
        - $ref: '#/components/schemas/QuestionCoreModel'
        - type: object
          properties:
            body:
              type: string
            owner:
              $ref: '#/components/schemas/UserCoreModel'
          required:
            - body
    QuestionCreationModel:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
      required:
        - title
        - body
    QuestionsListModel:
      type: array
      items:
        $ref: '#/components/schemas/QuestionStubModel'
    UserCoreModel:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    AnswerFullModel:
      type: object
      properties:
        id:
          type: integer
        qid:
          type: integer
        timestamp:
          type: number
        body:
          type: string
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        votes:
          type: integer
          minimum: 0
          default: 0
          nullable: false
        user_votes:
          type: object
          additionalProperties:
            type: boolean
        comments:
          $ref: '#/components/schemas/CommentsListModel'
      required:
        - id
        - qid
        - timestamp
        - body
        - owner
    AnswerCreationModel:
      type: object
      properties:
        body:
          type: string
      required:
        - body
    AnswersListModel:
      type: array
      items:
        $ref: '#/components/schemas/AnswerFullModel'
    CommentFullModel:
      type: object
      properties:
        id:
          type: integer
        aid:
          type: integer
        timestamp:
          type: number
        body:
          type: string
        sentiment:
          type: string
          enum:
            - POSITIVE
            - NEUTRAL
            - NEGATIVE
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        votes:
          type: integer
          minimum: 0
          default: 0
          nullable: false
        user_votes:
          type: object
          additionalProperties:
            type: boolean
      required:
        - id
        - aid
        - timestamp
        - body
        - sentiment
        - owner
    CommentCreationModel:
      type: object
      properties:
        body:
          type: string
        sentiment:
          type: string
          enum:
            - POSITIVE
            - NEUTRAL
            - NEGATIVE
          default: NEUTRAL
      required:
        - body
        - sentiment
    CommentsListModel:
      type: array
      items:
        $ref: '#/components/schemas/CommentFullModel'
    QuestionReportFullModel:
      type: object
      properties:
        id:
          type: integer
        qid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - qid
        - reason
        - status
        - owner
        - timestamp
    QuestionReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    QuestionReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/QuestionReportFullModel'
    AnswerReportFullModel:
      type: object
      properties:
        id:
          type: integer
        aid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - aid
        - reason
        - status
        - owner
        - timestamp
    AnswerReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    AnswerReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/AnswerReportFullModel'
    CommentReportFullModel:
      type: object
      properties:
        id:
          type: integer
        cid:
          type: integer
        reason:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
        owner:
          $ref: '#/components/schemas/UserCoreModel'
        timestamp:
          type: number
      required:
        - id
        - cid
        - reason
        - status
        - owner
        - timestamp
    CommentReportCreationModel:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    CommentReportsListModel:
      type: array
      items:
        $ref: '#/components/schemas/CommentReportFullModel'
    ReportStatusChangeModel:
      type: object
      properties:
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
      required:
        - status
    EmptyContentModel:
      type: string
      nullable: true
    # Pregunta completa para devolver [Alvar]
    PreguntaModelo:
      type: object
      properties:
        idpreg:
          type: integer
        titulo:
          type: string
        contenido:
          type: string
        fecha:
          type: integer
        autor:
          type: integer
        visibilidad:
          type: boolean
      required:
        - idpreg
        - titulo
        - fecha
        - autor
    # Modelo de voto para devolver de forma individual [Alvar]
    VoteModel:
      type: object
      properties:
        idvote:
          type: integer
        idelement:
          type: integer
        author:
          $ref: '#/components/schemas/UserCoreModel'
        type:
          type: string
          enum:
            - POSITIVE
            - NEGATIVE
    UserFullModel:
      type: object
      properties:
        uid:
          type: integer
        username:
          type: string
      required:
        - username
        - uid
  parameters:
    IdentificadorPregunta:
      name: idpreg
      description: Identificador de una pregunta.
      in: path
      schema:
        type: integer
      required: true
    IdentificadorRespuesta:
      name: idresp
      description: Identificador de una respuesta.
      in: path
      schema:
        type: integer
      required: true
    IdentificadorComentario:
      name: idcom
      description: Identificador de un comentario.
      in: path
      schema:
        type: integer
      required: true
    IdentificadorUsuario:
      name: idusu
      description: Identificar de un usuario.
      in: path
      schema:
        type: integer
      required: true
    IdentificadorReporte:
      name: idrep
      description: Identificar de un reporte.
      in: path
      schema:
        type: integer
      required: true
    QuestionIdPathParam:
      name: qid
      description: Question identifier.
      in: path
      schema:
        type: integer
      required: true
    AnswerIdPathParam:
      name: aid
      description: Answer identifier.
      in: path
      schema:
        type: integer
      required: true
    CommentIdPathParam:
      name: cid
      description: Comment identifier.
      in: path
      schema:
        type: integer
      required: true
    QuestionReportIdPathParam:
      name: qrid
      description: Question report identifier.
      in: path
      schema:
        type: integer
      required: true
    AnswerReportIdPathParam:
      name: arid
      description: Answer report identifier.
      in: path
      schema:
        type: integer
      required: true
    CommentReportIdPathParam:
      name: crid
      description: Comment report identifier.
      in: path
      schema:
        type: integer
      required: true

  responses:
    Empty:
      description: An empty content.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    ReportStatusChanged:
      description: Report status successfully changed.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    VoteCast:
      description: Vote successfully cast.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''
    VoteAlreadyCast:
      description: Vote already cast.
      content:
        'text/plain':
          schema:
            $ref: '#/components/schemas/EmptyContentModel'
          example: ''

  securitySchemes:
    user_token:
      description: |
        JWS token sent in the `Authorization` header as bearer.

        Contains, among other things, the user doing the requests.

        It is intended to be handed to the authorization service to obtain
        useful information, rather than trying to decode it in the backend.
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: dms2223backend.presentation.rest.security.verify_token
    api_key:
      description: |
        Secret shared between both the requestor and the service.
      type: apiKey
      name: X-ApiKey-Auth
      in: header
      x-apikeyInfoFunc: dms2223backend.presentation.rest.security.verify_api_key


  
  
